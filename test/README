
# Test Directory

This directory is intended for **PlatformIO Test Runner** and unit tests for the ESP32 LED Matrix Clock project.

## Current Status

This project is **ready for comprehensive unit testing** thanks to its modular architecture. Each library can be tested independently.

## Testing Strategy

### üß™ **Unit Testing Opportunities**


#### **Pure Logic Testing** (No Hardware Required)
- **`ClockDisplay`**: Time formatting, 12/24 hour conversion, text sizing logic
- **`SettingsManager`**: Configuration validation, EEPROM data structures, WiFi credentials
- **`MenuSystem`**: Navigation logic, menu state transitions, NTP/OTA/WiFi menu integration
- **`EffectsEngine`**: Particle physics calculations, color transformations
- **`ButtonManager`**: Debouncing algorithms, input state management
- **`TimeManager`**: NTP sync logic, timezone/DST calculations

#### **Mock Testing** (Simulated Hardware)
- **`MatrixDisplayManager`**: Display commands, brightness scaling
- **`AppStateManager`**: State transitions, mode switching
- **`WiFiManager`**: WiFi connection, OTA update simulation
- **`SystemManager`**: NTP/OTA coordination
- **Integration Testing**: Complete user workflow simulation, including NTP sync and OTA update flows

### üèóÔ∏è **Test Structure**

```cpp
#include <unity.h>
#include <ClockDisplay.h>
#include <SettingsManager.h>

// Example: Test time format conversion
void test_12h_conversion() {
    ClockDisplay display;

    // Test midnight
    TEST_ASSERT_EQUAL(12, display.convert24to12(0));
    TEST_ASSERT_TRUE(display.isAM(0));

    // Test noon
    TEST_ASSERT_EQUAL(12, display.convert24to12(12));
    TEST_ASSERT_FALSE(display.isAM(12));

    // Test 1 PM
    TEST_ASSERT_EQUAL(1, display.convert24to12(13));
    TEST_ASSERT_FALSE(display.isAM(13));
}

// Example: Test settings validation
void test_settings_validation() {
    SettingsManager settings;

    // Valid brightness range
    TEST_ASSERT_TRUE(settings.isValidBrightness(5));
    TEST_ASSERT_FALSE(settings.isValidBrightness(11));

    // Valid color indices
    TEST_ASSERT_TRUE(settings.isValidColor(15));
    TEST_ASSERT_FALSE(settings.isValidColor(20));
}

void setup() {
    UNITY_BEGIN();
    RUN_TEST(test_12h_conversion);
    RUN_TEST(test_settings_validation);
    UNITY_END();
}

void loop() {
    // Empty for unit tests
}
```

### üöÄ **Getting Started with Testing**

1. **Install Unity Testing Framework**:
   ```bash
   pio test
   ```

2. **Create Test Files**:
   - `test_clock_display.cpp` - Time formatting tests
   - `test_settings_manager.cpp` - Configuration tests
   - `test_menu_system.cpp` - Navigation tests
   - `test_effects_engine.cpp` - Animation logic tests

3. **Run Tests**:
   ```bash
   pio test --environment esp32dev
   ```

## Benefits of Modular Testing

‚úÖ **Isolated Testing** - Each library can be tested independently
‚úÖ **Fast Feedback** - Pure logic tests run quickly without hardware
‚úÖ **Regression Prevention** - Automated tests catch breaking changes
‚úÖ **Documentation** - Tests serve as usage examples
‚úÖ **Quality Assurance** - Ensures code reliability and maintainability

## Running Tests

To run tests when implemented:

```bash
pio test
```

For more information about PlatformIO Unit Testing:
https://docs.platformio.org/en/latest/advanced/unit-testing/index.html
